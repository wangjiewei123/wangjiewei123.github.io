[{"title":"2022.11.11问题总结","url":"/2022/11/11/2022.11.11/","content":"<h3 id=\"从教程上学习的怎么在idea中解决冲突\"><a href=\"#从教程上学习的怎么在idea中解决冲突\" class=\"headerlink\" title=\"从教程上学习的怎么在idea中解决冲突\"></a>从教程上学习的怎么在idea中解决冲突</h3><h4 id=\"1-什么是冲突\"><a href=\"#1-什么是冲突\" class=\"headerlink\" title=\"1.什么是冲突\"></a>1.什么是冲突</h4><p>　　冲突是指当在提交或者更新代码时被合并的文件与当前文件不一致。</p>\n<p>　　从上面对冲突的定义来看，冲突时发生在同一个文件上的。</p>\n<h4 id=\"2-生产上冲突的场景\"><a href=\"#2-生产上冲突的场景\" class=\"headerlink\" title=\"2.生产上冲突的场景\"></a>2.生产上冲突的场景</h4><p>　　常见冲突的生产场景如下</p>\n<ol>\n<li>更新代码</li>\n<li>提交代码</li>\n<li>多个分支代码合并到一个分支时</li>\n<li>多个分支向同一个远端分支推送代码时</li>\n</ol>\n<p>　　git的合并中产生冲突的具体情况：<br>　　&lt;1&gt;两个开发者（分支中）修改了同一个文件（不管什么地方）<br>　　&lt;2&gt;两个开发者（分支中）修改了同一个文件的名称<br>　　注意：两个分支中分别修改了不同文件中的部分，不会产生冲突，可以直接将两部分合并。</p>\n<p>　　总结：上面各种情况的本质都是，当前文件与合并文件不一致，因此不论哪种情况其解决冲突的方法是一样的。</p>\n<h4 id=\"3-从教程上学习怎么在idea中解决冲突\"><a href=\"#3-从教程上学习怎么在idea中解决冲突\" class=\"headerlink\" title=\"3.从教程上学习怎么在idea中解决冲突\"></a>3.从教程上学习怎么在idea中解决冲突</h4><p>　　模拟场景：</p>\n<p>　　假设有另个开发人员开发同一个项目，并且编写同一个文件,工作流程如下：</p>\n<p>　　1.01号程序员先上传文件conflict.txt，并继续在conflict.txt上写代码；</p>\n<p>　2.02号程序员更新项目代码，并在conflict.txt上写代码，写完后，在提交到远程服务端；</p>\n<p>　　<img src=\"/./2022.11.11/1.png\"></p>\n<p>　　3.当01号程序员把写完后，准备提交代码了，这时的正规操作手法，先更新在提交，但是在更新的时候必然会冲突，因为这时候更新的代码conflict.txt与本地仓库代码conflict.txt不一致</p>\n<p>　　<img src=\"/./2022.11.11/2.png\"></p>\n<p>　　提交前，我要更新，冲突了：</p>\n<p>　　<img src=\"/./2022.11.11/3.png\"></p>\n<p>　　解决方案如下：</p>\n<p>　　accept yours:代表以自己的为准；</p>\n<p>　　accept theris:代表以更新下来的文件为准；</p>\n<p>　　merge:代表手动合并</p>\n<p>　　一般解决冲突我们都是选择merge</p>\n<p>　　<img src=\"/./2022.11.11/4.png\"></p>\n<p>　　将需要的内容点击：”&gt;&gt;”既可以合并内容到result中，不需要的内容点击“x”即可，合并完成后点击apply即可。</p>\n<p>　　值得注意的是，最将所有的“x &gt;&gt;”符号都要处理完，不需要的点击“x”,需要的点击“&gt;&gt;”</p>\n<p>　　最后，不论是什么场景下产生的冲突解决方法是一样的。</p>\n<h4 id=\"4-关于冲突的个人心得\"><a href=\"#4-关于冲突的个人心得\" class=\"headerlink\" title=\"4.关于冲突的个人心得\"></a>4.关于冲突的个人心得</h4><p>　　多人协作开发的时候,如果出现了你没有改过的文件跟你冲突了,一定要去找到当事者,说清楚是如何冲突的；</p>\n<p>　　然后协商解决,千万不要擅自拉别的分支去试图解决冲突,或找文件覆盖，更或者以自己的文件为准.</p>\n<p>　　同时记住,解决了之后,要add 和 commit 最后push.为保证万无一失,最后在冲突都解决之后,重启项目；</p>\n<p>　　保证至少不会有立即奔溃的现象发生.然后才去提交,push.</p>\n<p>　　提交的时候,一定要保持清醒,先搞清楚自己要提交的文件之间的关系,然后再提交,这样才不会有文件缺失的问题,造成奔溃.</p>\n<p>　　如果任务比较多,又开了多个分支,分别进行开发,再次强调，一定要清楚自己在各个分支上做了什么,自己要提交的是什么.最好是能做个详细的笔记，没有把握宁愿不要去提交到生产服务器.</p>\n","categories":["新知识","Hexo"],"tags":["踩坑"]},{"title":"2022.11.14Hexo报错","url":"/2022/11/14/2022-11-11/","content":"<h2 id=\"Hexo-d-命令报错\"><a href=\"#Hexo-d-命令报错\" class=\"headerlink\" title=\"Hexo d 命令报错\"></a>Hexo d 命令报错</h2><p><img src=\"/./2022-11-11/111.png\"></p>\n<p>经常会碰到这种问题，一般是因为与github链接不稳定，尝试重新推送可以解决.</p>\n<p>应该是在使用代理会，会使电脑的网络环境出现一些默认的设置，导致无法连接到github上。有时间详细的研究一下。</p>\n<p>网上教程说使用git config –global –unset http.proxy 取消一下代理就ok了，</p>\n<p>确实不报错了，但是又一直卡在writing那里不动了，</p>\n<p>最终根据链接的方法，然后·····还是不行！</p>\n<p>不过git给了一个提示，需要把github添加到Windows的host文件中。</p>\n<p>文件路径：C:\\Windows\\System32\\drivers\\etc</p>\n<p>找到这个文件后在下边添加：192.30.255.113 github.com</p>\n<p>ok! 搞定</p>\n<p>92.30.255.113 github.com</p>\n"},{"title":"2022.11.10问题总结","url":"/2022/11/10/2022.11.10/","content":"<h3 id=\"一、认真看教程真的很重要\"><a href=\"#一、认真看教程真的很重要\" class=\"headerlink\" title=\"一、认真看教程真的很重要\"></a>一、认真看教程真的很重要</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">当我尝试hexo deploy命令时git报错</span><br><span class=\"line\">error：RPC failed;curl 56 OpenSSL SSL_read: Connectionwas reset,errno 10054</span><br><span class=\"line\">百度结果是：SSL证书问题或者git中版本问题</span><br><span class=\"line\">从网上查到的解决办法：</span><br><span class=\"line\">    删除掉.deploy_git重新clean、g、d</span><br><span class=\"line\">但是尝试多次后并没有效果，后来通过删掉远程仓库，重新按照教程搞了一边并且后来又删除掉</span><br><span class=\"line\">本地的ssh key并重新生成，添加到github中最终解决了，原因可能是我在搭建过程中漏掉了</span><br><span class=\"line\">某个不起眼的环节导致部署失败，因为后来没有再出现过这个错误，所以并没有深究原因，所以</span><br><span class=\"line\">仔细看教程真的很重要！！！！！</span><br><span class=\"line\"></span><br><span class=\"line\">顺便再记录一下几个以后会常用到的快捷命令</span><br><span class=\"line\">    hexo clean 清除hexo缓存  头三个都可以通过缩写首字母开头来简化命令如：hexo c</span><br><span class=\"line\">    hexo generate 生成文章</span><br><span class=\"line\">    hexo deploy 部署</span><br><span class=\"line\">    hexo new post name 新建文章名</span><br><span class=\"line\">    hexo new page name 新建页面名</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、推荐使用Typora软件编辑博客！\"><a href=\"#二、推荐使用Typora软件编辑博客！\" class=\"headerlink\" title=\"二、推荐使用Typora软件编辑博客！\"></a>二、推荐使用Typora软件编辑博客！</h3><p>hexo与Typora的完美结合..</p>\n<p>Typora是我觉得非常好的Markdown文本编辑器可以拿来做笔记本身支持识别JAVA代码，但是需要收费，Typora对于插入图片的支持做得非常好，在文件-&gt;偏好设置进入设置。</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9HWTlaSlB4NmJNQWhrZlJCN3k3UUNtUjJpYnRFc3l6dlduYlBWejRCdUFVd2lhWFJvY0FqWjhlZFVvMGp2NHRzWjdOWHptZUQ3ZTRUUDJPa0FFWXN3dXhRLzY0MA?x-oss-process=image/format,png\" alt=\"alt\"></p>\n<h3 id=\"三、此外从网上找的几种插入图片办法\"><a href=\"#三、此外从网上找的几种插入图片办法\" class=\"headerlink\" title=\"三、此外从网上找的几种插入图片办法\"></a>三、此外从网上找的几种插入图片办法</h3><p>在 <a href=\"https://blog.csdn.net/dta0502/article/details/84385460?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-84385460-blog-91389277.pc_relevant_landingrelevant&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-84385460-blog-91389277.pc_relevant_landingrelevant&utm_relevant_index=2\">此网站上有详细教程</a> 上有详细教程！ 此外CSDN博客也支持MD文件上传</p>\n<h3 id=\"src-链接\"><a href=\"#src-链接\" class=\"headerlink\" title=\"src 链接\"></a>src 链接</h3><p>如果我要插入的图片，是一个外部的 src 链接地址，比如该图片存放在某网站上，那就使用 Markdown 默认的插入图片的方式，方法和插入链接很像，只是前面多了一个感叹号，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">![alt](https://ws3.sinaimg.cn/large/005BYqpgly1g29eohl7qhj31c00u0dkz.jpg)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地绝对路径\"><a href=\"#本地绝对路径\" class=\"headerlink\" title=\"本地绝对路径\"></a>本地绝对路径</h3><p>当 Hexo 博客中只用到少量图片时，可以将图片统一放在 <em>source&#x2F;images</em> 文件夹中，通过 Markdown 语法访问它们。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">![alt](/images/test.jpg)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"本地相对路径\"><a href=\"#本地相对路径\" class=\"headerlink\" title=\"本地相对路径\"></a>本地相对路径</h3><p>图片除了可以放在统一的 images 文件夹中，还可以放在文章自己的目录中，文章的目录可以通过配置 <em>_config.yml</em>：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n","categories":["新知识","Hexo"],"tags":["踩坑"]},{"title":"JumpServer堡垒机使用","url":"/2022/11/14/2022-11-14/","content":"<h3 id=\"什么是堡垒机\"><a href=\"#什么是堡垒机\" class=\"headerlink\" title=\"什么是堡垒机\"></a>什么是堡垒机</h3><p>堡垒机也是一台服务器，在一个特定的网络环境下，为了保障网络和数据不受来自外部和内部用户的入侵和破坏，而运用各种技术手段实时收集、监控网络环境中每一个组成部分（服务器）的系统状态、安全事件、网络活动，以便集中报警、及时处理以及审计定责<br>可以把堡垒机看作一个升级版的跳板机，跳板机有的功能堡垒机都有并且还多了许多功能，如实时收集、监控网络环境、集中报警等功能<br>堡垒机的优点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">堡垒机可以给其他服务器推送sudo用户，并且为其设置权限</span><br><span class=\"line\">堡垒机多了一个用户行为监控的功能，并且是录像</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JumpServer概述\"><a href=\"#JumpServer概述\" class=\"headerlink\" title=\"JumpServer概述\"></a>JumpServer概述</h3><p>JumpServer是全球首款完全开源的堡垒机，使用GNU GPL v2.0开源协议，是符合4A的专业运维审计系统<br>JumpServer使用Python\\Django开发，遵循Web 2.0规范，配备了业界领先的web Terminal（web终端，即网页终端）解决方案，交互界面美观，用户体验良好<br>JumpServer采用分布式结构，支持多机房跨区域部署，中心节点提供API（接口），各机房部署登录节点，可以横向扩展，并且没有并发限制<br>JumpServer为互联网企业提供了认证、授权、审计、自动化运维等功能<br>JumpServer通过调用各种应用程序的模块来实现各种功能</p>\n<h2 id=\"JumpServer实现的功能\"><a href=\"#JumpServer实现的功能\" class=\"headerlink\" title=\"JumpServer实现的功能\"></a>JumpServer实现的功能</h2><p><img src=\"/2022/11/14/2022-11-14/2.jpg\"></p>\n<hr>\n<h4 id=\"身份验证Authentication\"><a href=\"#身份验证Authentication\" class=\"headerlink\" title=\"身份验证Authentication\"></a>身份验证Authentication</h4><p>登录认证：资源统一登录和认证、LDAP认证、支持OpenID，实现单点登录<br>多因子认证：MFA（Google Authenticator）</p>\n<h4 id=\"账号管理-Account\"><a href=\"#账号管理-Account\" class=\"headerlink\" title=\"账号管理 Account\"></a>账号管理 Account</h4><p>集中账号管理：管理用户管理、系统用户管理<br>统一密码管理：资产密码托管、自动生成密码、密码自动推送、密码过期设置<br>批量密码变更：定期批量修改密码、生成随机密码<br>多云环境的资产纳管：对私有云、公有云资产统一管理</p>\n<h4 id=\"授权控制Authorization\"><a href=\"#授权控制Authorization\" class=\"headerlink\" title=\"授权控制Authorization\"></a>授权控制Authorization</h4><p>资产授权管理：资产树、资产或资产组灵活授权、节点内资产自动继承授权<br>RemoteApp：实现更细粒度的应用级授权<br>组织管理：实现多租户管理，权限隔离<br>多维度授权：可以对用户、用户组或者系统角色授权<br>指令限制：限制特权指令使用、支持黑白名单<br>统一文件传输：SFTP文件的上传\\下载<br>文件管理：Web SFTP文件管理</p>\n<h4 id=\"安全审计Audit\"><a href=\"#安全审计Audit\" class=\"headerlink\" title=\"安全审计Audit\"></a>安全审计Audit</h4><p>会话管理：在线会话管理、历史会话管理<br>录像管理：linux录像支持、windows录像支持<br>指令审计：指令记录<br>文件传输审计：上传\\下载记录审计</p>\n<h4 id=\"部署JumpServer堡垒机\"><a href=\"#部署JumpServer堡垒机\" class=\"headerlink\" title=\"部署JumpServer堡垒机\"></a>部署JumpServer堡垒机</h4><p><img src=\"/2022/11/14/2022-11-14/4.jpg\"></p>\n<p>（1）实验环境<br>JumpServer对硬件和软件是有要求的<br>硬件要求：2个CPU核心，4G内存，50G硬盘，这是最低配置<br>操作系统：Linux发行版 X86_64位的系统<br>Python：只可以使用Python3.6.X版本<br>Mysql：大于等于5.6版本<br>mariadb：大于等于5.5.56版本<br>redis<br>系统\tip地址\tPython版本\t主机名<br>Centos7.4\t192.168.100.202 桥接网卡 （两块网卡）\tpython3.6.8\tjumpserver</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">******（1）先做基础配置</span><br><span class=\"line\">[root@Centos7 ~]# hostnamectl set-hostname jumpserver</span><br><span class=\"line\">[root@Centos7 ~]# su</span><br><span class=\"line\">[root@jumpserver ~]# systemctl stop firewalld</span><br><span class=\"line\">[root@jumpserver ~]# setenforce 0</span><br><span class=\"line\">setenforce: SELinux is disabled</span><br><span class=\"line\">[root@jumpserver ~]# mount /dev/cdrom /mnt/</span><br><span class=\"line\">mount: /dev/sr0 写保护，将以只读方式挂载</span><br><span class=\"line\">mount: /dev/sr0 已经挂载或 /mnt 忙</span><br><span class=\"line\">       /dev/sr0 已经挂载到 /mnt 上</span><br><span class=\"line\">[root@jumpserver ~]# vim /etc/yum.repos.d/centos.repo #修改yum源，修改为本地yum源，也可以使用网络yum源进行下载，依赖包很多</span><br><span class=\"line\">[aaa]</span><br><span class=\"line\">name=aaa</span><br><span class=\"line\">baseurl=file:///mnt</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\"></span><br><span class=\"line\">[jumpserver]</span><br><span class=\"line\">name=jumpserver</span><br><span class=\"line\">baseurl=file:///root/jumpserver-packs</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">[root@jumpserver ~]# ll       #上传yum库</span><br><span class=\"line\">总用量 92708</span><br><span class=\"line\">-rw-------. 1 root root     1264 1月  12 18:27 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--  1 root root 94928169 5月  31 18:48 jumpserver-packs.tar.gz</span><br><span class=\"line\">[root@jumpserver ~]# tar xf jumpserver-packs.tar.gz  </span><br><span class=\"line\">[root@jumpserver ~]# ll</span><br><span class=\"line\">总用量 92720</span><br><span class=\"line\">-rw-------. 1 root root     1264 1月  12 18:27 anaconda-ks.cfg</span><br><span class=\"line\">drwxr-xr-x  3 root root     8192 12月 10 2019 jumpserver-packs</span><br><span class=\"line\">-rw-r--r--  1 root root 94928169 5月  31 18:48 jumpserver-packs.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（2）上传安装包，进行安装</span><br><span class=\"line\">[root@jumpserver ~]# ll</span><br><span class=\"line\">总用量 181496</span><br><span class=\"line\">-rw-------. 1 root root     1264 1月  12 18:27 anaconda-ks.cfg</span><br><span class=\"line\">-rw-r--r--  1 root root  7664345 5月  31 18:51 jumpserver-master.zip</span><br><span class=\"line\">drwxr-xr-x  3 root root     8192 12月 10 2019 jumpserver-packs</span><br><span class=\"line\">-rw-r--r--  1 root root 94928169 5月  31 18:48 jumpserver-packs.tar.gz</span><br><span class=\"line\">-rw-r--r--  1 root root 60226671 5月  31 18:51 pip-packs.tar.gz</span><br><span class=\"line\">-rw-r--r--  1 root root 23010188 5月  31 18:52 Python-3.6.8.tgz</span><br><span class=\"line\">[root@jumpserver ~]# tar xf pip-packs.tar.gz </span><br><span class=\"line\">[root@jumpserver ~]# tar xf Python-3.6.8.tgz -C /usr/local/src/</span><br><span class=\"line\">[root@jumpserver ~]# yum install -y gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel #安装依赖包</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">[root@jumpserver ~]# cd /usr/local/src/Python-3.6.8/</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]#  ./configure --prefix=/usr/local/python &amp;&amp; make -j 2 &amp;&amp; make install  #make -j 2表示使用两个cpu进行编译</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]# ln -s /usr/local/python/bin/* /usr/local/bin/ #优化python命令执行路径</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]# python3 -V #查看python版本</span><br><span class=\"line\">Python 3.6.8</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]# pip3 -V #查看pip版本</span><br><span class=\"line\">pip 18.1 from /usr/local/python/lib/python3.6/site-packages/pip (python 3.6)</span><br><span class=\"line\">[root@jumpserver Python-3.6.8]# cd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（3）配置python3虚拟环境，因为centos6、7自带的python版本是python2，而yum等工具依赖的是python2，所以不能直接把python2换成python3，为了不扰乱原来的环境，可以配置python3的虚拟环境，进入虚拟环境后所有的操作都会在虚拟环境中执行</span><br><span class=\"line\">[root@jumpserver ~]# python3.6 -m venv /opt/py3 #创建虚拟环境</span><br><span class=\"line\">[root@jumpserver ~]# source /opt/py3/bin/activate #进入虚拟环境</span><br><span class=\"line\">(py3) [root@jumpserver ~]#   #前面多了（py3）就是进入了虚拟环境</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（4）安装jumpserver</span><br><span class=\"line\">(py3) [root@jumpserver ~]# yum -y install unzip </span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">(py3) [root@jumpserver ~]# unzip jumpserver-master.zip -d /opt/ #解压</span><br><span class=\"line\">(py3) [root@jumpserver ~]# cd /opt/</span><br><span class=\"line\">(py3) [root@jumpserver opt]# mv jumpserver-master/ jumpserver #重命名</span><br><span class=\"line\">(py3) [root@jumpserver opt]# cd /opt/jumpserver/requirements/</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# ll</span><br><span class=\"line\">总用量 24</span><br><span class=\"line\">-rw-r--r-- 1 root root  251 7月  26 2019 alpine_requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  212 7月  26 2019 deb_requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  359 7月  26 2019 issues.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root   54 7月  26 2019 mac_requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root 1551 7月  26 2019 requirements.txt</span><br><span class=\"line\">-rw-r--r-- 1 root root  204 7月  26 2019 rpm_requirements.txt</span><br><span class=\"line\">(py3) [root@jumpserver requirements]#  yum -y install $(cat rpm_requirements.txt)     #rpm_requirements.txt里面就是jumpserver所需要的所有rpm包，$(cat rpm_requirements.txt)可以直接全部安装</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（5）安装python库依赖</span><br><span class=\"line\">#安装python库依赖有两种方法，一种是没有网络的环境下安装，一种是有网络的环境下安装</span><br><span class=\"line\">#没有网络的环境下安装：（需要有现成的pip包，一开始已经上传了）</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# pip install --no-index --find-links=/root/pip-packs/ pyasn1 six cffi pytest-runner #需要先安装这几个依赖包，--no-index是忽略包索引，不加这个的话会上网络上寻找，--find-links=为指定依赖包的路径，表示直接从这个路径下寻找</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# pip install --no-index --find-links=/root/pip-packs/ -r requirements.txt     #-r的意思和刚才的$(cat rpm_requirements.txt)相同</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\">#在有网络的环境下安装：（修改yum源文件）</span><br><span class=\"line\">默认下载pip指的是国外的源，下载特别慢，但是可以给pip指定国内的源来提升下载速度</span><br><span class=\"line\">(py3) [root@jumpserver ~]# mkdir /root/.pip</span><br><span class=\"line\">(py3) [root@jumpserver ~]# vim /root/.pip/pip.conf</span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple  #这个是清华源</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br><span class=\"line\">(py3) [root@jumpserver ~]# pip install --upgrade pip  #安装之前先更新pip版本，不然会报错</span><br><span class=\"line\">(py3) [root@jumpserver ~]# pip install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******(6)安装redis，如果有预先部署好的redis可以不用安装，可以使用yum或者源码包来安装</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# yum -y install redis</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# systemctl start redis</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# systemctl enable redis</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/redis.service to /usr/lib/systemd/system/redis.service.</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（7）安装mysql，如果有预先部署好的mysql可以不用安装，可以使用yum安装mariadb或者源码安装mysql</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# yum -y install mariadb mariadb-devel mariadb-server</span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\">完毕！</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# systemctl start mariadb</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# systemctl enable mariadb</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/mariadb.service to /usr/lib/systemd/system/mariadb.service.</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# echo $?</span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（8）创建jumpserver数据库并且授权用户</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# mysql</span><br><span class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MariaDB connection id is 2</span><br><span class=\"line\">Server version: 5.5.64-MariaDB MariaDB Server</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; create database jumpserver default charset &#x27;utf8&#x27;; #创建jumpserver库默认字体为utf8</span><br><span class=\"line\">Query OK, 1 row affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; grant all on jumpserver.* to &#x27;jumpserver&#x27;@&#x27;127.0.0.1&#x27; identified by &#x27;jumpserver&#x27;; #授权用户</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; flush privileges;  #更新权限</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; exit</span><br><span class=\"line\">Bye</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（9）生成密钥，生成的两串随机数待会会用到</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echo #/dev/urandom是一个数据流，也就是随机数，默认里面是乱码，所以需要筛选，tr -dc A-Za-z0-9就是筛选字母大小写和数字的，head -c 49;echo也就是输出49个随机数</span><br><span class=\"line\">Njkc2G6ZTbkmv6SKchQIHnR0ubk29yWyhG0annnef6IHi3xYE</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 16 ; echo #和上面同理</span><br><span class=\"line\">TDYY6C1tY24iZv6j</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（10）修改jumpserver配置文件，配置文件是python格式的，不能使用tab要使用空格隔开</span><br><span class=\"line\">(py3) [root@jumpserver requirements]# cd /opt/jumpserver/</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# cp config_example.yml config.yml</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# vim config.yml </span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"> 3 # $ cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 49;echo</span><br><span class=\"line\"> 4 SECRET_KEY: Njkc2G6ZTbkmv6SKchQIHnR0ubk29yWyhG0annnef6IHi3xYE #中间都有空格</span><br><span class=\"line\"> 5 </span><br><span class=\"line\"> 6 # SECURITY WARNING: keep the bootstrap token used in production secret!</span><br><span class=\"line\"> 7 # 预共享Token coco和guacamole用来注册服务账号，不在使用原来的注册接受机制</span><br><span class=\"line\"> 8 BOOTSTRAP_TOKEN: pehtn3wIVSIuSK1v</span><br><span class=\"line\"> 9 </span><br><span class=\"line\">。。。。。。</span><br><span class=\"line\"> 35 DB_ENGINE: mysql</span><br><span class=\"line\"> 36 DB_HOST: 127.0.0.1</span><br><span class=\"line\"> 37 DB_PORT: 3306</span><br><span class=\"line\"> 38 DB_USER: jumpserver</span><br><span class=\"line\"> 39 DB_PASSWORD: jumpserver  #注意密码、用户、数据库名称要和刚才数据库中的操作相同</span><br><span class=\"line\"> 40 DB_NAME: jumpserver</span><br><span class=\"line\"> 41 </span><br><span class=\"line\">。。。。。。 #下面还可以修改redis配置，这里直接使用默认配置了</span><br><span class=\"line\"> 49 # Redis配置</span><br><span class=\"line\"> 50 REDIS_HOST: 127.0.0.1</span><br><span class=\"line\"> 51 REDIS_PORT: 6379</span><br><span class=\"line\"> 52 # REDIS_PASSWORD: </span><br><span class=\"line\">#保存退出</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（11）生成数据表结构和初始化数据</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# cd /opt/jumpserver/utils/</span><br><span class=\"line\">(py3) [root@jumpserver utils]# sh make_migrations.sh </span><br><span class=\"line\">(py3) [root@jumpserver utils]# echo $? </span><br><span class=\"line\">0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">******（12）运行jumpserver并且配置系统启动脚本</span><br><span class=\"line\">(py3) [root@jumpserver utils]# cd /opt/jumpserver/</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# ./jms start all  #可以加-d放到后台运行，但是需要确保已经载入python3的虚拟环境CTRL+C退出，直接编写启动脚本就可以，jumpserver默认监听端口为8080</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# vim /usr/lib/systemd/system/jms.service</span><br><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=jms</span><br><span class=\"line\">After=network.target mariadb.service redis.service docker.service</span><br><span class=\"line\">Wants=mariadb.service redis.service docker.service</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">Environment=&quot;PATH=/opt/py3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin&quot;</span><br><span class=\"line\">ExecStart=/opt/jumpserver/jms start all -d</span><br><span class=\"line\">ExecRestart=/opt/jumpserver/jms restart all -d</span><br><span class=\"line\">ExecStop=/opt/jumpserver/jms stop</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# systemctl daemon-reload</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# systemctl start jms #开启jumpserver服务</span><br><span class=\"line\">#启动有点慢</span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# netstat -anpt | grep 8080</span><br><span class=\"line\">tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      1389/python3.6    </span><br><span class=\"line\">(py3) [root@jumpserver jumpserver]# systemctl enable jms</span><br><span class=\"line\">Created symlink from /etc/systemd/system/multi-user.target.wants/jms.service to /usr/lib/systemd/system/jms.service.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"EasyExcel","url":"/2022/11/07/2022.11.7Node/","content":"<h3 id=\"2022-11-7EasyExcel\"><a href=\"#2022-11-7EasyExcel\" class=\"headerlink\" title=\"2022.11.7EasyExcel\"></a>2022.11.7EasyExcel</h3><h3 id=\"读Excel\"><a href=\"#读Excel\" class=\"headerlink\" title=\"读Excel\"></a>读Excel</h3><p>DEMO代码地址：<a href=\"https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java\">https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最简单的读</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> DemoData&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"doctag\">@link</span> DemoDataListener&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;3. 直接读即可</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleRead</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> TestFileUtil.getPath() + <span class=\"string\">&quot;demo&quot;</span> + File.separator + <span class=\"string\">&quot;demo.xlsx&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span></span><br><span class=\"line\">    EasyExcel.read(fileName, DemoData.class, <span class=\"keyword\">new</span> <span class=\"title class_\">DemoDataListener</span>()).sheet().doRead();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"写Excel\"><a href=\"#写Excel\" class=\"headerlink\" title=\"写Excel\"></a>写Excel</h3><p>DEMO代码地址：<a href=\"https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java\">https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 最简单的写</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> com.alibaba.easyexcel.test.demo.write.DemoData&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;2. 直接写即可</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">simpleWrite</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> TestFileUtil.getPath() + <span class=\"string\">&quot;write&quot;</span> + System.currentTimeMillis() + <span class=\"string\">&quot;.xlsx&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 这里 需要指定写用哪个class去读，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果这里想使用03 则 传入excelType参数即可</span></span><br><span class=\"line\">    EasyExcel.write(fileName, DemoData.class).sheet(<span class=\"string\">&quot;模板&quot;</span>).doWrite(data());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"web上传、下载\"><a href=\"#web上传、下载\" class=\"headerlink\" title=\"web上传、下载\"></a>web上传、下载</h3><p>DEMO代码地址：<a href=\"https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java\">https://github.com/alibaba/easyexcel/blob/master/easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 文件下载（失败了会返回一个有部分数据的Excel）</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * 1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> DownloadData&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * 2. 设置返回的 参数</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * 3. 直接写，这里注意，finish的时候会自动关闭OutputStream,当然你外面再关闭流问题不大</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@GetMapping(&quot;download&quot;)</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">download</span><span class=\"params\">(HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 这里注意 使用swagger 会导致各种问题，请直接用浏览器或者用postman</span></span><br><span class=\"line\">     response.setContentType(<span class=\"string\">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);</span><br><span class=\"line\">     response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系</span></span><br><span class=\"line\">     <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> URLEncoder.encode(<span class=\"string\">&quot;测试&quot;</span>, <span class=\"string\">&quot;UTF-8&quot;</span>).replaceAll(<span class=\"string\">&quot;\\\\+&quot;</span>, <span class=\"string\">&quot;%20&quot;</span>);</span><br><span class=\"line\">     response.setHeader(<span class=\"string\">&quot;Content-disposition&quot;</span>, <span class=\"string\">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName + <span class=\"string\">&quot;.xlsx&quot;</span>);</span><br><span class=\"line\">     EasyExcel.write(response.getOutputStream(), DownloadData.class).sheet(<span class=\"string\">&quot;模板&quot;</span>).doWrite(data());</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 文件上传</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"doctag\">@link</span> UploadData&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"doctag\">@link</span> UploadDataListener&#125;</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;3. 直接读即可</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"meta\">@PostMapping(&quot;upload&quot;)</span></span><br><span class=\"line\"> <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> String <span class=\"title function_\">upload</span><span class=\"params\">(MultipartFile file)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">     EasyExcel.read(file.getInputStream(), UploadData.class, <span class=\"keyword\">new</span> <span class=\"title class_\">UploadDataListener</span>(uploadDAO)).sheet().doRead();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n","categories":["新知识","EasyExcel"],"tags":["标签1","标签2"]},{"title":"记录JPA报错","url":"/2022/11/08/2022.11.8Node/","content":"<h3 id=\"2022-11-8记录JPA报错\"><a href=\"#2022-11-8记录JPA报错\" class=\"headerlink\" title=\"2022.11.8记录JPA报错\"></a>2022.11.8记录JPA报错</h3><p>1、一定要注意如果我们在实体类中没有配置数据表的默认值，那么在存入和取出的时候应该设置。否则在取出的时候就会出现问题。<br>2、如何通过一方获取到多方实体<br>3、jsp中 jsp文件夹与上面servlet映射名最好不要一致，这样会出问题<br>4、注意！！！！一个实体类的表ID名字请设置为ID，保证不出错。</p>\n<p><strong>问题描述</strong><br>    分类和博客 多对多 双向 我这里配置中间表来实现实体类的关联<br>    我现在想要通过策略实体获取所有博客，在打印blog时，准确的说是在调用blog的getCategories时 出现stackoverflow的问题。</p>\n<p><strong>问题分析：</strong><br>    因为是双向多对多的关联查询，每一个blog实例会输出Set categories的值，而每一个Category实例则会输出Set blogs的值，因此一直递归下去知道栈溢出报错。</p>\n<p><strong>解决方法：</strong>其实一般情况下没有打印的需求</p>\n<p>遍历的时候不调用或者先将blogs设置为null</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">category.getBlogs().forEach(x-&gt;&#123;</span><br><span class=\"line\">  \t\tx.setCategories(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  \t\tSystem.out.pringln(x);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"记录JPA报错2.0","url":"/2022/11/09/2022.11.9/","content":"<h3 id=\"记录JPA报错2-0\"><a href=\"#记录JPA报错2-0\" class=\"headerlink\" title=\"记录JPA报错2.0\"></a>记录JPA报错2.0</h3><p>使用save()方法更新数据踩到的坑<br>1、不能更新数据</p>\n<p>使用save()方法更新数据时注意：<br>若传入的实体对象id属性有值，则会匹配id进行更新操作；若id属性为空，则会自动新增一条数据到数据库。</p>\n<p>但在我实际操作时，有时候save()方法传入的实体对象的id属性有值，却也是新插入了一条数据，这里的原因是save()方法不仅根据id是否为空来判定是否更新，还根据version版本号来判断是否是更新。</p>\n<p>在执行插入语句时，注意把版本号写入就不会有这种问题了。<br>2、多次更新数据，报StaleObjectStateException异常</p>\n<p>详细如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.springframework.orm.ObjectOptimisticLockingFailureException: Object of class [GDAppointmentHisInfo] with identifier: optimistic locking failed;</span><br><span class=\"line\">nested exception is org.hibernate.StaleObjectStateException: Row was updated or deleted by another <span class=\"title function_\">transaction</span> <span class=\"params\">(or unsaved-value mapping was incorrect)</span></span><br></pre></td></tr></table></figure>\n\n<p>翻译：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ObjectOptimisticLockingFailureException:带有标识符的类[GDAppointmentHisInfo]的对象:乐观锁定失败;</span><br><span class=\"line\">嵌套异常org.hibernate。StaleObjectStateException:行被另一个事务更新或删除(或者未保存值映射不正确)</span><br></pre></td></tr></table></figure>\n\n<p>原因：<br>网上给出的解释是StaleObjectStateException因为乐观锁以版本号来加锁，假设第一次更新时获取的数据库对象的版本号为1，执行更新操作之后，版本号变为2，而第二次更新时还是在第一次获取的数据库对象上更新（版本号还是1），因为其版本号已经改变，就抛出这个异常。</p>\n<p>解决办法：<br>在第二次更新前，重新取数据库的对象，也就是每次执行更新、删除操作，要在最新的数据库对象上进行更新。</p>\n","categories":["新知识"],"tags":["踩坑","JPA"]},{"title":"记录Git报错","url":"/2022/11/09/2022.11.10.1/","content":"<p>一、warning: LF will be replaced by CRLF in node&#x2F;node_project.The file will have its original line endings in your working directory</p>\n<p>1、报错警告：</p>\n<p>git add添加文件到暂存区时警告</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: LF will be replaced by CRLF in node/node-project.</span><br><span class=\"line\">The file will have its original line endings in your working directory</span><br></pre></td></tr></table></figure>\n\n<p>2、原因：</p>\n<p>这是因为在windows和unix下的换行符不一样，git bush是unix风格设计的，虽然git默认会自动转换，但是有时会出问题</p>\n<p>3、解决办法：</p>\n<p>禁止自动转换</p>\n<p>git config –global core.autocrlf false</p>\n<pre><code>1\n</code></pre>\n<p>二、 ! [rejected] main -&gt; main (fetch first) error: failed to push some refs to ‘<a href=\"https://github.com/xxxxxx%E2%80%99\">https://github.com/xxxxxx’</a></p>\n<p>1、情景再现：</p>\n<p>git push origin main 提交代码到远程仓库时报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> ! [rejected]        main -&gt; main (fetch first)</span><br><span class=\"line\">error: failed to push some refs to &#x27;https://github.com/xxxxxx&#x27;</span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do</span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing</span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class=\"line\">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class=\"line\">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>\n\n\n\n<p>2、原因：</p>\n<p>远程仓库中的代码比本地仓库中的新（存在本地仓库没有的文件）</p>\n<p>3、解决办法：</p>\n<p>将远程仓库中的代码合并到本地即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin main</span><br></pre></td></tr></table></figure>\n\n"},{"title":"【置顶】&[视频测试]&[图片测试]","url":"//news/","content":"<h3 id=\"测试图片\"><a href=\"#测试图片\" class=\"headerlink\" title=\"测试图片\"></a>测试图片</h3><p><img src=\"https://ak.hycdn.cn/announce/images/20220623/c6de324d90b1963bf1b4664871753d60.jpg\"></p>\n<span id=\"more\"></span>\n\n<h3 id=\"测试视频\"><a href=\"#测试视频\" class=\"headerlink\" title=\"测试视频\"></a>测试视频</h3><iframe width=\"900\" height=\"450\" src=\"https://v.miaopai.com/iframe?scid=SvyHaHOczsp7B6ftW86oqMMz62-h5ai6~Fwp8A__\" frameborder=\"0\" allowfullscreen>\n</iframe>\n","categories":["活动"],"tags":["Arknights"]},{"title":"记录JPA报错","url":"/2022/11/17/2022-11-17/","content":"<p>w</p>\n<p>出现场景</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> Parameter with that position [<span class=\"number\">1</span>] did not exist; nested exception is java.lang.IllegalArgumentException: Parameter with that position [<span class=\"number\">1</span>] did not exist</span><br><span class=\"line\"></span><br><span class=\"line\">Caused by: java.lang.IllegalArgumentException: Parameter with that position [<span class=\"number\">1</span>] did not exist</span><br><span class=\"line\">at org.hibernate.jpa.spi.BaseQueryImpl.findParameterRegistration(BaseQueryImpl.java:<span class=\"number\">502</span>)</span><br><span class=\"line\">at org.hibernate.jpa.spi.BaseQueryImpl.setParameter(BaseQueryImpl.java:<span class=\"number\">692</span>)</span><br><span class=\"line\">at org.hibernate.jpa.spi.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:<span class=\"number\">181</span>)</span><br><span class=\"line\">at org.hibernate.jpa.spi.AbstractQueryImpl.setParameter(AbstractQueryImpl.java:<span class=\"number\">32</span>)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class=\"number\">43</span>)</span><br><span class=\"line\">at java.lang.reflect.Method.invoke(Method.java:<span class=\"number\">497</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>原因：在使用hibernate做连接查询中，映射实体VO类时，出现此错误，，where条件后面加入ORDER BY ?#{?pageable}，就完美解决了这个问题；</p>\n<p>应该使用原生SQL语法添加WHERE条件<br><img src=\"/./2022-11-17/1.jpg\"></p>\n<p>最终改成:</p>\n<p><img src=\"/./2022-11-17/2.jpg\"></p>\n<p>改为  ： <strong>PI.id&#x3D; ?1  …就可以了</strong></p>\n<h4 id=\"SpringCloud-JAP之-Query如何实现分页功能\"><a href=\"#SpringCloud-JAP之-Query如何实现分页功能\" class=\"headerlink\" title=\"SpringCloud JAP之@Query如何实现分页功能\"></a>SpringCloud JAP之@Query如何实现分页功能</h4><p>完成：第一遍</p>\n<p>1.SpringCloud JAP之@Query如何实现分页功能？</p>\n<p>步骤一：在UserRepository中添加给AgeGroup分页的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Query(value = &quot;select * from userspringdata where age_group = ?1&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">countQuery = &quot;select count(*) from userspringdata where age_group = ?1&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">nativeQuery = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;UserEntity&gt; <span class=\"title function_\">selectUsersByAgeGroupPage</span><span class=\"params\">(String ageGroup, Pageable pageable)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：在UserController写调用方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//@Query and native and pageable    </span></span><br><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;findUsersByAgeGroupPage&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">getUsersByAgeGroupPage</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;ageGroup&quot;)</span> String ageGroup,</span></span><br><span class=\"line\"><span class=\"params\">                                     <span class=\"meta\">@RequestParam(&quot;currentPage&quot;)</span> <span class=\"type\">int</span> currentPage,</span></span><br><span class=\"line\"><span class=\"params\">                                     <span class=\"meta\">@RequestParam(&quot;pageSize&quot;)</span> <span class=\"type\">int</span> pageSize)</span>&#123;</span><br><span class=\"line\">                                     </span><br><span class=\"line\">    <span class=\"type\">Pageable</span> <span class=\"variable\">pageable</span> <span class=\"operator\">=</span> PageRequest.of(currentPage, pageSize);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> userRepository.selectUsersByAgeGroupPage(ageGroup, pageable);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启启动类<br>localhost:8001&#x2F;user&#x2F;findUsersByAgeGroupPage?ageGroup&#x3D;0&amp;currentPage&#x3D;0&amp;pageSize&#x3D;2</p>\n"}]